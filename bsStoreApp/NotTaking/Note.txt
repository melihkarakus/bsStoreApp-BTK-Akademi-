1.Models Klasörü oluşturuldu. İçine Books sınıfı tanımlandı ve sütunları geçildi.
2.Repositories Klasörü oluşturuldu. İçine DBContext tanımlanması için paket olarak entityframework paketi yüklendi. 
3.appsettings.json database kurulumu için bir konfigrasyon geçildi. 
4.Program.cs bunu çalıştırmak için oraya bir konfigrasyon geçildi.
5.Migration uygulamak için yani database tabloyu eklemek için tools ve desing paketleri oluşturuldu.
6.Repositories klasörünün altına bir Config klasörü eklendi. Eklenen klasörde IEntityTypeConfigration<Book> parametresi ile tanımlandı. Ctrl+. yaptığımızda
implemente ettik ve ardından konfigrasyon geçtik. BookConfig Migration uygularken hata alındı hatada ise BookConfig görünmez geçersiz kılınması isteniyordu 
bu yüzden override metodu kullandık.
7.BooksController oluşturuldu. BooksController içine HTTP(Get,Post,Put,Delete) metodları tanımlandı.
8.Solution üzerine bir class projesi ekledik ve buna models klasörü oluşturduk onun içine sınıflarımı tutucaz.
9.Repositories class oluşturuldu. Contracts klasörü oluşturuldu ve buna IrepositoryBase sınıfı oluşturulup crud işlemleri gerçekleştirild.
10.RepoContext ve BookConfig Klasörleri ile database bağlantıları burada kalır.
11.RepositoryBase sınıfı oluşturuldu. Crud işlemleri yapıldı.
12.IBookRepository Oluşturuldu. Bookrepository implemente alındı ve Crud işlemleri geçildi.
13.IrepositoryManager diye bir interface oluşturuldu. Ardından metodlar tanımlandı. RepositoryManager adında bir class oluşturuldu İnterface tanımlananlar 
oraya implemente edildi ve gerekli kaydetme işlemi için kodlar geçildi.(Amaç tekrar tekrar kodları yazmamak kısaltmak.)
14.Program.cs fazladan tanımlamak yerine Extensions klasörü oluşturup gerekli kod geçilip. Gerekli sql program.cs bağlantısı geçildi.
15.ApiController BookController IRepositoryManager çağrıldı çünkü Bütün interface ve classlardan kalıtım aldı. BookController düzeltildi.
16.BookController da çalıştırdığımızda RepositoryManager ve IRepositoryManager birbirlerini tanımlamadığı için Extensions klasörünün içinde bu metod geçildi.
Ardından bunu metodu program.cs de çağırdık.
17.bsStoreApp.Service Class Library oluşturuldu. ve bir IBookService ve BookManager class ve interface oluşturuldu. ve Parametreler geçildi sınıflara bak. 
crud işlemi ise BookManager sınıfında yapıldı.
18.IServiceManager interface sınıfında bir metod tanımlandı. ServiceManager class ise implement edildikten sonra gerekli kod yapısı yazıldı.
19.Api üzerinde extensions klasörüne gerekli kodlama yapısı geçildi birbirine tanıtmak için.
20.Presentation katmanı oluşturuldu. ApiController içindeki controller presentation katmanında yer alacaktır. Controller tanımlaması yapılması için
api katmanında program.cs gelip şu configrasyonu geçmelisin.
("builder.Services.AddControllers().AddApplicationPart(typeof(bsStoreApp.Presentation.AssemblyReference).Assembly);")
assemblyreference sınıfıda presentation içinde tanımlıdır.
21.Api tarafına ContextFactory diye bir klasör oluşturuldu. RepositoryContext sınıfı oluşturulup kodlar içinde detaylı bak kalıtımlar alındı. Bir yol verildi
yola göre migration uygulandı.

NLOG
21.Service Katmanın içinde bulunan Contract Klasörünün içine ILoggerService Tanımlandı ve paket yüklendi.
22.Service katmanına loggermanager içine Iloggerservice de tanımlanan metodlar implemente ettik ve kodlamalarını yaptık.
23.ServiceExtensions klasörüne gelip bir konfigrasyon geçildi. nlog.config diye bir dosya oluşturuldu ve içine parametreler geçildi. Program.cs geldik nlogconfig
tanımlattırmak için bu kod geldi.LogManager.LoadConfiguration(string.Concat(Directory.GetCurrentDirectory(), "/nlog.config")); bu kod geçtik.
24.IBookService sınıfında logger işlemi generate constracter geçtik. Loggerservice hata alma esnasında loglama işlemi yaptırdık ve projemize internal_logs
klasörü eklenmiş oldu.

Global Hata Ayıklama
25.ErrorDetails sınıfı oluşturduk.
26.ExceptionsMiddlewareExtensions sınıfı oluşturduk api üzerindeki Extensions klasörünün içine ve bu class içine handler configure işlemi geçtik. Açıklaması
şöyle verilen hatayı daha detaylı anlamamız ve temiz şekilde okumamız için.
27.program.cs tanımladığımız ExceptionsMiddlewareExtensions sınıfını tanımlattırmamız gerekiyor ve kod şu şekilde olacak("var logger = app.Services.GetRequiredService<ILoggerService>();
app.ConfigureExceptionHandler(logger);")
28.NotFound ve BookNotFound yani hatayı ekrana yansıtmak için tanımlanan kodları burada geçtik. Entity sınıfında bulabilirsin Exceptions klasöründe.
29.statuscode belirle hatanın ne ile döndüğünü örneğini karşımıza çıkartmak için. BookNotFound ve NotFonudExceptions sınıfları oluşturuldu.
30.tanımlanan hata kodlarını döndürüp ekrana yansıtmak için throw new BookNotFound(id); bu şekilde yapabilirsin. BooksController da bak GetOneBook yaptık.
BooksManager bakabilirsin Service Katmanında orada delete update ve getonebook işlemleri yapıyor.

AutoMapper
31.Automapper kütüphanesi kuruldu. Program.cs de çağırıldı.
32.Entity Katmanına BookDto Oluşturuldu.
33.Api katmanında Utilities klasörünün altında automapper klasörü oluşturulup MappingProfile class oluşturuldu. Oluşturulan class içine ctor tanımlandı ve 
gerekli map işlemi yapıldı.
34.mapplemek istediğimiz bookmanager geldik ve bookmanager bir constroucter geçildi ve geçilen constracter update yaparken bir mapleme işlemi yapılacak
ardından bağlı olan ServiceManager bizden bookdto isticek ve değiştirilmesi gereken update bookdto eklenecek oraya eklendiğin içinde Presentation Katmanındaki
bookcontroller da bir kalıntı aldığı için orayada bookun kendisi değil mapping yaptığımız bookdto çağırmamız gerekiyor

İçerik Pazarlığı
35.İçerik pazarlığı için apiye istek atılıyor herhangi bir istemci tarafından eğer biz onu destekliyorsak yanıt veriyoruz. Bu bölümde program.cs bir konfigrasyon
yazıldı. config.RespectBrowserAcceptHeader = true; bunu yazıp altınada config.ReturnHttpNotAcceptable = true; bunu yaz.
36.xml formatında dönebilmesi için isteğin AddXmlDataContractSerializerFormatters() bunu eklememiz gerekiyor
37.IBookService BookDto eklendi. Fakat BookDto sınıfı olmadığında entity katmanına gelindi ve DTO klasöründe bir BookDto sınıfı oluşturuldu.
BookManager gelindi GetAllBooks da BookDto çağırıldı ve MappingProfile kısmında BookDto mapleme işlemi yapıldı.

Doğrulama(Validation)
38.Entity katmanının altında DTO klasöründe BookDtoForManipulation klasörü oluşturuldu ve validasyon yazıldı.
39.IBookservice Dto çevirdik. ve BookManager çevirilen serviceleri impelemente edecek şekilde yazdık ve gerekli mapleme işlemi OneBook ve CrateBook için 
tanımlama yapıldı.
40.BookController da Contract klasöründe değişiklik yapıldığı için Controllerda Ekleme yapma işleminde değişiklik yapmamız gerekmektedir.
41.PostValidasyonunu yapmak istediğimizde program.cs hatayı gösterebilmek için konfigrasyon yaptık.builder.Services.Configure<ApiBehaviorOptions>(opt =>
{
    opt.SuppressModelStateInvalidFilter = true;
});
konfigrasyon budur.

Asenkron Kod
42.IBookRepository Async metodlarını çevirdik. Gerekli impelemente alınan yerleride async metodlarına çevirmiş olduk.
43.IBookService async şeklinde crud işlemleri düzenlendi oraı düzenlendiği içinde BookManager impelemente edilen metodlarda async olarak düzeltildi.















